```python
class Сотрудник:
    def __init__(self, имя, фамилия, должность, зарплата):
        self.__имя = имя
        self.__фамилия = фамилия
        self.__должность = должность
        self.__зарплата = зарплата
        self.__проекты = []

    def информация(self):
        return f"{self.__имя} {self.__фамилия}, {self.__должность}, Зарплата: {self.__зарплата} рублей в месяц"

    def добавить_проект(self, проект):
        self.__проекты.append(проект)
        return f"Проект '{проект}' добавлен для {self.__имя} {self.__фамилия}"

    def расчет_зарплаты(self):
        return self.__зарплата

class Руководитель(Сотрудник):
    def __init__(self, имя, фамилия, должность, зарплата, подчиненные=None, бонус=0):
        super().__init__(имя, фамилия, должность, зарплата)
        self.__подчиненные = подчиненные or []
        self.__бонус = бонус

    def добавить_подчиненного(self, подчиненный):
        self.__подчиненные.append(подчиненный)
        return f"{подчиненный._Сотрудник__имя} {подчиненный._Сотрудник__фамилия} добавлен(а) в список подчиненных для {self._Сотрудник__имя} {self._Сотрудник__фамилия}"

    def расчет_зарплаты(self):
        базовая_зарплата = super().расчет_зарплаты()
        итоговая_зарплата = базовая_зарплата + self.__бонус
        return итоговая_зарплата

сотрудник1 = Сотрудник("Иван", "Иванов", "Менеджер", 50000)
сотрудник2 = Сотрудник("Петр", "Петров", "Разработчик", 70000)

руководитель1 = Руководитель("Анна", "Иванова", "Руководитель отдела", 80000, бонус=10000)
сотрудник3 = Сотрудник("Мария", "Сидорова", "Ассистент", 40000)

print(сотрудник1.добавить_проект("Проект 1"))
print(сотрудник2.добавить_проект("Проект 2"))

print(сотрудник1.информация())
print(сотрудник2.информация())

print(руководитель1.добавить_проект("Проект 3"))
print(руководитель1.добавить_подчиненного(сотрудник3))

print(сотрудник1.расчет_зарплаты())
print(руководитель1.расчет_зарплаты())
```
